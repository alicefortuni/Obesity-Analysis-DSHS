)
cat('Summary about value in 2022 for each Region: \n')
summary_stats
#Region by sex
ggplot(data_2022_male_female, aes(x = region, y = value, fill = sex)) +
geom_boxplot(position = position_dodge(0.8), width = 0.7) +
labs(title = "Distribution of obesity percentage by Region and Sex in 2022",
x = "Region",
y = "Obesity percentage (%)",
fill = "Sex") +
scale_fill_manual(values = c("Male" = "steelblue", "Female" = "pink")) +
theme_minimal() +
facet_grid( .~ region, scales = "free_x")+
theme(
strip.text.x = element_blank())
##country
table(country)
cat("Number of countries: ", length(unique(country)))
n_country_per_region <- filtered_data %>%
group_by(region) %>%
summarise(n_country = n_distinct(country))%>%
arrange(desc(n_country))
cat("Number of countries per Region: \n")
n_country_per_region
regions <- unique(data_2022_both$region)
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>% filter(region == region_name)
p <- ggplot(region_data, aes(x = reorder(countryCode, value), y = value, fill = countryCode)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  legend.position = "none")
print(p)
}
#Percentage of overweight people in the world in 2022 by country
world <- ne_countries(scale = "medium", returnclass = "sf")
world_countries <- unique(world$iso_a3)
filtered_countries <- unique(data_2022_both$countryCode)
missing_in_world <- setdiff(filtered_countries, world_countries)
missing_names_df <- data_2022_both %>%
filter(countryCode %in% missing_in_world) %>%
select(countryCode, country)
missing_names_df
world_codes_df <- world %>%
select(name, iso_a3)
missing_names_with_codes <- missing_names_df %>%
left_join(world_codes_df, by = c("country" = "name"))
missing_names_with_codes
world$iso_a3[world$name == "France"] <- "FRA"
world$iso_a3[world$name == "Norway"] <- "NOR"
world_countries <- unique(world$iso_a3)
filtered_countries <- unique(data_2022_both$countryCode)
missing_in_world <- setdiff(filtered_countries, world_countries)
world_data <- left_join(world, data_2022_both, by =  c( "iso_a3"="countryCode"))
ggplot(data = world_data) +
geom_sf(aes(fill = value)) +
scale_fill_gradientn(colors = c("#f1f1f1", "red", "red4"), na.value = "lightgrey", name = "Obesity percentage (%)") +
theme_minimal() +
labs(title = "Obesity percentage by Country in 2022") +
theme(legend.position = "bottom")
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
library(stringr)
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
slice_max(value, n = 5) %>%  # Seleziona i primi 5 paesi
bind_rows(slice_min(data_2022_both %>% filter(region == region_name), value, n = 5)) %>%  # Seleziona gli ultimi 5 paesi
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
slice_max(value, n = 10) %>%  # Seleziona i primi 5 paesi
bind_rows(slice_min(data_2022_both %>% filter(region == region_name), value, n = 10)) %>%  # Seleziona gli ultimi 5 paesi
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
slice(seq(1, n(), by = 2)) %>%  # Seleziona ogni 2Â° paese
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
#    slice(seq(1, n(), by = 2)) %>%  # campiona ogni 2 paesi
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
#plot for each region
for (region_name in regions) {
region_data <- data_2022_both %>%
filter(region == region_name) %>%
#    slice(seq(1, n(), by = 2)) %>%  # campiona ogni 2 paesi
mutate(country = str_trunc(country, width = 10, side = "right", ellipsis = "")) # Trunca il nome del paese
p <- ggplot(region_data, aes(x = reorder(country, value), y = value, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Average obesity percentage by Country in", region_name, "(2022)"),
x = "Country",
y = "Obesity Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
print(p)
}
ggplot(data_2022_both, aes(x = region, y = value, fill = region)) +
geom_boxplot() +
labs(title = "Distribution of obesity percentage by Region in 2022",
x = "Region",
y = "Obesity percentage (%)",
fill = "Region") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary_stats <- data_2022_both %>%
group_by(region) %>%
summarise(
n = n(),
mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
max = max(value, na.rm = TRUE),
median = median(value, na.rm = TRUE),
IQR = IQR(value, na.rm = TRUE),
.groups = 'drop'
)
cat('Summary about value in 2022 for each Region: \n')
summary_stats
#Percentage of overweight people in the world in 2022 by country
world <- ne_countries(scale = "medium", returnclass = "sf")
world_countries <- unique(world$iso_a3)
filtered_countries <- unique(data_2022_both$countryCode)
missing_in_world <- setdiff(filtered_countries, world_countries)
missing_names_df <- data_2022_both %>%
filter(countryCode %in% missing_in_world) %>%
select(countryCode, country)
missing_names_df
world_codes_df <- world %>%
select(name, iso_a3)
missing_names_with_codes <- missing_names_df %>%
left_join(world_codes_df, by = c("country" = "name"))
missing_names_with_codes
world$iso_a3[world$name == "France"] <- "FRA"
world$iso_a3[world$name == "Norway"] <- "NOR"
world_countries <- unique(world$iso_a3)
filtered_countries <- unique(data_2022_both$countryCode)
missing_in_world <- setdiff(filtered_countries, world_countries)
world_data <- left_join(world, data_2022_both, by =  c( "iso_a3"="countryCode"))
ggplot(data = world_data) +
geom_sf(aes(fill = value)) +
scale_fill_gradientn(colors = c("#f1f1f1", "red", "red4"), na.value = "lightgrey", name = "Obesity percentage (%)") +
theme_minimal() +
labs(title = "Obesity percentage by Country in 2022") +
theme(legend.position = "bottom")
data_2022_male_female%>%
group_by(sex) %>%
summarise(
mean = mean(value),
median = median(value),
sd = sd(value)
)
# Normality
qq_plots <- data_2022_male_female %>%
ggplot(aes(sample = value)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ sex, scales = "free") +
labs(title = paste("Q-Q Plot by Gender in 2022"),
x = "Theoretical Quantiles",
y = "Sample Quantiles") +
theme_minimal()
qq_plots
shapiro_male <- shapiro.test(data_2022$value[data_2022$sex == "Male"])
shapiro_female <- shapiro.test(data_2022$value[data_2022$sex == "Female"])
cat("Shapiro-Wilk test results by gender in 2022: \n")
shapiro_male
shapiro_female
cat("Shapiro-Wilk test results by gender in 2022: \n")
shapiro_male
shapiro_female
#Can't use t di Student -> Mann-Whitney test
mann_whitney_test <- wilcox.test(male_value, female_value, paired=FALSE)
cat("Mann-Whitney test results: \n")
mann_whitney_test
#Can't use t di Student -> Mann-Whitney test
mann_whitney_test <- wilcox.test(male_value, female_value, paired=FALSE)
#Can't use t di Student -> Mann-Whitney test
mann_whitney_test <- wilcox.test(data_2022$value[data_2022$sex == "Male"], data_2022$value[data_2022$sex == "Female"], paired=FALSE)
cat("Mann-Whitney test results: \n")
mann_whitney_test
# distribution
ggplot(data_2022_male_female, aes(x = sex, y = value, fill = sex)) +
geom_boxplot() +
labs(title = "Distribution of obesity percentage by Gender in 2022",
x = "Sex",
y = "Obesity percentage (%)") +
theme_minimal()
#check normality and homoschedasticity to apply ANOVA
qq_plots <- data_2022_both %>%
ggplot(aes(sample = value)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ region, scales = "free") +
labs(title = paste("Q-Q Plot for regions in 2022"),
x = "Theoretical Quantiles",
y = "Sample Quantiles") +
theme_minimal()
qq_plots
#check normality and homoschedasticity to apply ANOVA
qq_plots <- data_2022_both %>%
ggplot(aes(sample = value)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ region, scales = "free") +
labs(title = paste("Q-Q Plot for Regions in 2022"),
x = "Theoretical Quantiles",
y = "Sample Quantiles") +
theme_minimal()
qq_plots
shapiro_test_results <- data_2022_both %>%
group_by(region) %>%
summarise(
shapiro_p = shapiro.test(value)$p.value,
)
cat("Shapiro-Wilk test results for regions in 2022: \n")
shapiro_test_results
#HOMOSCEDASTICITY
bartlett_test_result <- bartlett.test(value ~ region, data = data_2022_both)
cat("Bartlett's test result for homoscedasticity: \n")
bartlett_test_result
kruskal_wallis_result <- kruskal.test(value ~ region, data = data_2022_both)
cat("Kruskal Wallis test result: \n")
kruskal_wallis_result
# Perform the Mann-Whitney test for each pair of regions
#bonferroni
pairwise_test_bonferroni <- pairwise.wilcox.test(data_2022_both$value, data_2022_both$region, p.adjust.method = "bonferroni")
print(pairwise_test_bonferroni)
#benjamin-hochberg
pairwise_test_bh <- pairwise.wilcox.test(data_2022$value, data_2022$region, p.adjust.method = "BH")
print(pairwise_test_bh)
years<-2013:2022
data_2022_both_avg <-data_both%>% filter(year %in% years)%>%
group_by(region, year) %>%
summarise(avg_value = mean(value),
.groups = 'drop')
for (year in years) {
cat("Summary for year:", year, "\n")
print(summary(data_2022_both_avg$avg_value[data_2022_both_avg$year == year]))
cat("\n")
}
ggplot(data_2022_both_avg, aes(x = factor(year), y = avg_value)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Distribution of Mean Percentage of Obesity by Year",
x = "Year",
y = "Mean Percentage of Obesity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
wide_data <- data_2022_both_avg %>%
pivot_wider(names_from = year, values_from = avg_value)
wide_data
avg_matrix<- as.matrix(wide_data[,-1])
rownames(avg_matrix) <- wide_data$region
# Import libraries
library(ggplot2) #: Ã una libreria per la creazione di grafici basata sulla "grammar of graphics".
library(dplyr) # Ã¨ un pacchetto per la manipolazione e trasformazione dei dati. Fornisce funzioni per filtrare, selezionare, ordinare, unire e aggregare dati in modo efficiente.
library(sf) #Usato per lavorare con dati geospaziali. Permette di gestire, visualizzare e analizzare dati geografici come punti, linee, poligoni e altro.
library(rnaturalearth) #metti riferimento su articolo.
library(rnaturalearthdata) #Queste librerie forniscono mappe vettoriali e dati geografici a livello globale. Sono particolarmente utili per tracciare e visualizzare confini nazionali, regioni e altri dati geospaziali.
library(lattice) # Una libreria per la creazione di grafici a griglia, che consente di creare visualizzazioni multivariate e trellis graphs in modo efficiente.
library(stringr)#usata per fare il trunk dei country
wide_data <- data_2022_both_avg %>%
pivot_wider(names_from = year, values_from = avg_value)
library(tidyr)
wide_data <- data_2022_both_avg %>%
pivot_wider(names_from = year, values_from = avg_value)
wide_data
avg_matrix<- as.matrix(wide_data[,-1])
rownames(avg_matrix) <- wide_data$region
avg_matrix
apply(avg_matrix, MARGIN=2, FUN=mean) #vedo che la media negli anni cresce
apply(avg_matrix, MARGIN=1, FUN=mean) #vedo che anche la media per regione geografica Ã¨ molti diversa.
mean(avg_matrix)
bwplot(avg_value ~ year | region,
data = data_last_years,
scales = list(y = list(at = seq(0, 80, by = 10))))
bwplot(avg_value ~ year | region,
data = data_2022_both,
scales = list(y = list(at = seq(0, 80, by = 10))))
bwplot(avg_value ~ year | region,
data = data_2022_both_avg,
scales = list(y = list(at = seq(0, 80, by = 10))))
par(mfrow=c(2,5))
qq_plots <- data_last_years %>%
ggplot(aes(sample = avg_value)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ year, scales = "free") +
labs(title = paste("Q-Q Plot for last years"),
x = "Theoretical Quantiles",
y = "Sample Quantiles") +
theme_minimal()
par(mfrow=c(2,5))
qq_plots <- data_2022_both_avg %>%
ggplot(aes(sample = avg_value)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ year, scales = "free") +
labs(title = paste("Q-Q Plot for last years"),
x = "Theoretical Quantiles",
y = "Sample Quantiles") +
theme_minimal()
qq_plots
shapiro_test_results <- data_last_years %>%
group_by(year) %>%
summarise(
shapiro_p = shapiro.test(avg_value)$p.value,
.groups = 'drop'
)
shapiro_test_results <- data_2022_both_avg %>%
group_by(year) %>%
summarise(
shapiro_p = shapiro.test(avg_value)$p.value,
.groups = 'drop'
)
print("Risultati del test di Shapiro-Wilk per le regioni negli ultimi 10 anni:")
print(shapiro_test_results)
# HOMOSCEDASTICITY: Bartlett
bartlett_test_result <- bartlett.test(avg_value  ~  year, data=data_last_years)
cat("Bartlett's test result for homoscedasticity: \n")
bartlett_test_result
# SFERICITA': Greenhouse-Geisser
S <- var(avg_matrix) #Cov Matrix
J <- dim(avg_matrix)[2]
numeratore <- J^2*mean(diag(S)-mean(S))^2
denominatore <- (J-1)*(sum(S^2)-2*J*sum(apply(S,1,mean)^2)+
+J^2*mean(S)^2)
epsilon <- numeratore/denominatore
epsilon
# can't use ANOVA -> Friedman
friedman_result <- friedman.test(avg_value ~ year | region, data = data_last_years)
# can't use ANOVA -> Friedman
friedman_result <- friedman.test(avg_value ~ year | region, data = data_2022_both_avg)
friedman_result
# ANOVA
anova_result <- aov(avg_value ~ year + Error(region/year), data = data_last_years)
# ANOVA
anova_result <- aov(avg_value ~ year + Error(region/year), data = data_2022_both_avg)
summary(anova_result) #il p-value Ã¨ molto basso: effettivamente ci sono delle differenze negli anni per la stessa region
datax <- data.frame(
Anno = rep(c("Anno 1", "Anno 2", "Anno 3"), each = 3),
Regione = rep(c("Regione 1", "Regione 2", "Regione 3"), 3),
Percentuale_Obesita = c(5, 30, 40, 40, 5, 30, 30, 40, 5)
)
data_wide <- dcast(datax, Regione ~ Anno, value.var = "Percentuale_Obesita")
library(reshape2)
install.packages("reshape2")
library(reshape2)
data_wide <- dcast(datax, Regione ~ Anno, value.var = "Percentuale_Obesita")
# Visualizzare i dati riformattati
print(data_wide)
data_wide <- datax %>%
pivot_wider(names_from = Anno, values_from = Percentuale_Obesita)
# Visualizzare i dati riformattati
print(data_wide)
# Esecuzione dell'ANOVA a misure ripetute
# Notare che dobbiamo rimuovere la colonna della regione
data_anova <- as.data.frame(data_wide[,-1])
colnames(data_anova) <- c("Anno_1", "Anno_2", "Anno_3")
data_anova
data_anova$Regione <- data_wide$Regione
anova_result <- aov(Anno_1 + Anno_2 + Anno_3 ~ 1 + Error(Regione/(Anno_1 + Anno_2 + Anno_3)), data = data_anova)
data_anova$Regione <- data_wide$Regione
wide_data
avg_matrix
data_wide <- datax %>%
pivot_wider(names_from = Anno, values_from = Percentuale_Obesita)
# Visualizzare i dati riformattati
print(data_wide)
# Esecuzione dell'ANOVA a misure ripetute
# Notare che dobbiamo rimuovere la colonna della regione
data_anova <- as.data.frame(data_wide[,-1])
colnames(data_anova) <- c("Anno_1", "Anno_2", "Anno_3")
data_anova
data_anova$Regione <- data_wide$Regione
anova_result <- aov(Anno_1 + Anno_2 + Anno_3 ~ 1 + Error(Regione/(Anno_1 + Anno_2 + Anno_3)), data = data_anova)
summary(anova_result)
# Test di Friedman
friedman_result <- friedman.test(Percentuale_Obesita ~ Anno | Regione, data = data)
# Test di Friedman
friedman_result <- friedman.test(Percentuale_Obesita ~ Anno | Regione, data = datax)
print(friedman_result)
# ANOVA
anova_result <- aov(avg_value ~ year + Error(region/year), data = data_2022_both_avg)
summary(anova_result) #il p-value Ã¨ molto basso: effettivamente ci sono delle differenze negli anni per la stessa region
data <- data.frame(
Anno = rep(c("Anno 1", "Anno 2", "Anno 3"), each = 3),
Regione = rep(c("Regione 1", "Regione 2", "Regione 3"), 3),
Percentuale_Obesita = c(5, 30, 40, 40, 5, 30, 30, 40, 5)
)
# Convertire i dati in formato lungo per l'ANOVA a misure ripetute
data_long <- reshape(data,
idvar = "Regione",
timevar = "Anno",
direction = "wide")
# Rimuovere il prefisso 'Percentuale_Obesita.' e rinominare le colonne
names(data_long) <- gsub("Percentuale_Obesita.", "", names(data_long))
# Visualizzare i dati riformattati
print(data_long)
# Esecuzione dell'ANOVA a misure ripetute
anova_result <- aov(Anno_1 + Anno_2 + Anno_3 ~ 1 + Error(Regione/(Anno_1 + Anno_2 + Anno_3)), data = data_long)
data <- data.frame(
Anno = rep(c("Anno_1", "Anno_2", "Anno_3"), each = 3),
Regione = rep(c("Regione 1", "Regione 2", "Regione 3"), 3),
Percentuale_Obesita = c(5, 30, 40, 40, 5, 30, 30, 40, 5)
)
# Convertire i dati in formato lungo per l'ANOVA a misure ripetute
data_long <- reshape(data,
idvar = "Regione",
timevar = "Anno",
direction = "wide")
# Rimuovere il prefisso 'Percentuale_Obesita.' e rinominare le colonne
names(data_long) <- gsub("Percentuale_Obesita.", "", names(data_long))
# Visualizzare i dati riformattati
print(data_long)
# Esecuzione dell'ANOVA a misure ripetute
anova_result <- aov(Anno_1 + Anno_2 + Anno_3 ~ 1 + Error(Regione/(Anno_1 + Anno_2 + Anno_3)), data = data_long)
summary(anova_result)
# Esecuzione dell'ANOVA a misure ripetute
anova_result <- aov(Percentuale_Obesita ~ Anno + Error(Regione/Anno), data = data)
summary(anova_result)
data <- data.frame(
Anno = rep(c("Anno_1", "Anno_2", "Anno_3"), each = 3),
Regione = rep(c("Regione 1", "Regione 2", "Regione 3"), 3),
Percentuale_Obesita = c(6, 30, 40, 40, 3, 30, 30, 40, 7)
)
# Convertire i dati in formato lungo per l'ANOVA a misure ripetute
data_long <- reshape(data,
idvar = "Regione",
timevar = "Anno",
direction = "wide")
# Rimuovere il prefisso 'Percentuale_Obesita.' e rinominare le colonne
names(data_long) <- gsub("Percentuale_Obesita.", "", names(data_long))
# Visualizzare i dati riformattati
print(data_long)
# Esecuzione dell'ANOVA a misure ripetute
anova_result <- aov(Percentuale_Obesita ~ Anno + Error(Regione/Anno), data = data)
summary(anova_result)
friedman_res <- friedman.test(Percentuale_Obesita ~ Anno | Regione, data = data)
friedman_res
